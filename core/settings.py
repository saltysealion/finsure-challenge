"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path


# Boolean converter
def to_bool(v):
    return v in (True, 'True', 1, '1')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = to_bool(os.environ.get('DEBUG_MODE'))

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    "rest_framework_json_api",
    'rest_framework',
    "django_filters",
]

LOCAL_APPS = [
    'finsure.apps.FinsureConfig',
    'api_v1.apps.ApiV1Config',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# Middleware

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS':
            {
                'context_processors':
                    [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
            },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default':
        {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DATABASE_NAME'),
            'HOST': os.environ.get('DATABASE_HOST'),
            'PORT': os.environ.get('DATABASE_PORT'),
            'USER': os.environ.get('DATABASE_USER'),
            'PASSWORD': os.environ.get('DATABASE_PASS'),
        }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
            'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DRF - Django Rest Framework

REST_FRAMEWORK = {
    # Permissions
    'DEFAULT_PERMISSION_CLASSES': [],
    # Auth
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    # API data format
    'DEFAULT_PARSER_CLASSES': ["rest_framework_json_api.parsers.JSONParser", ],
    # Filtering
    'DEFAULT_FILTER_BACKENDS':
        [
            'rest_framework_json_api.filters.QueryParameterValidationFilter',
            'rest_framework_json_api.django_filters.DjangoFilterBackend',
            'rest_framework.filters.SearchFilter',
        ],
    # Renderer
    'DEFAULT_RENDERER_CLASSES':
        ['rest_framework_json_api.renderers.JSONRenderer', ],
    # Metadata
    'DEFAULT_METADATA_CLASS':
        'rest_framework_json_api.metadata.JSONAPIMetadata',
    # Schema
    'DEFAULT_SCHEMA_CLASS':
        'rest_framework_json_api.schemas.openapi.AutoSchema',
    # Pagination
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework_json_api.pagination.JsonApiPageNumberPagination',
    'PAGE_SIZE': 5,
    # Search
    'SEARCH_PARAM': 'filter[search]',
    # Exceptions
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    # Tests
    'TEST_REQUEST_RENDERER_CLASSES':
        ['rest_framework_json_api.renderers.JSONRenderer', ],
    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json',
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append(
        # A custom BrowsableAPIRenderer that fixes the issue
        # when the QueryParameterValidationFilter raises a
        # ValidationError; shows a proper 4XX error with
        # details instead of a 500 error (unlike the default
        # BrowsableAPIRenderer)
        'api_v1.renderers.BrowsableAPIRenderer',
    )

# JSON:API settings

JSON_API_UNIFORM_EXCEPTIONS = True
JSON_API_FORMAT_TYPES = 'underscore'
